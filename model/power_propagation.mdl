/***
 -------------------------------------------------------------------------------
 |                                                                             |
 | NASA Glenn Research Center                                                  |
 | 21000 Brookpark Rd 		                                                     |
 | Cleveland, OH 44135 	                                                       |
 |                                                                             |
 | File Name:     power_propagation.mdl                                        |
 | Author(s):	    Jonathan Fuzaro Alencar, George Thomas      			           |
 | Date(s):       February 2020                                                |
 |                                                                             |
 | Description:   Model to serve a test of the automatic power propagation.    |
 |                WARNING: Currently converges with impractical results.       |
 |                                                                             |
 -------------------------------------------------------------------------------
***/

ElectricAssembly powerPropagation {
  
  Element Enode E1 { // This will be an AC port once power types are propagated through the system.
  ElectricInputPort EP_I1, EP_I2;
  ElectricOutputPort EP_O1, EP_O2, EP_O3;
  frequency = 400;  // [Hz]
  }

  Element Enode E2 { // This will be a DC port once power types are propagated through the system.
    ElectricInputPort EP_I1, EP_I2;
    ElectricOutputPort EP_O;
    Vreal = 1350;  // [volts]
    Vimag = 0;    // [volts]
  }
  Element Source S1 { // AC source 1
    setOption("ElectricPowerType", "AC3");
    Vrms     = 1000;  // [volts]
    Vphase     = 0;    // [volts]
    effDes    = .99; // [99 %]
    frequency = 400;  // [Hz]
  }

  Element Source S2 { // AC source 2
    setOption("ElectricPowerType", "AC3");
    Vrms     = 1000;  // [volts]
    Vphase     = 0;    // [volts]
    effDes    = .99; // [99 %]
    frequency = 400;  // [Hz]
  }

  Element Source B1 { // battery 1
    setOption("ElectricPowerType", "DC");
    Vrms  = 1350;  // [volts]
    Vphase  = 0;    // [volts]
    effDes = .99; // [99 %]
  }

  Element AeroCable C1 { // cable 1
    length = 1;  // [meters]
    //Ireal  = 10; // [amps]
    //Iimag  = 0;  // [amps]
  }

  Element AeroCable C2 { // cable 2
    length = 1;  // [meters]
    //Ireal  = 10; // [amps]
    //Iimag  = 0;  // [amps]
  }

  Element AeroCable C3 { // cable 3
    length = 1;  // [meters]
    //Ireal  = 10; // [amps]
    //Iimag  = 0;  // [amps]
  }

  Element AeroCable C4 { // cable 4
    length = 1;  // [meters]
    //Ireal  = 10; // [amps]
    //Iimag  = 0;  // [amps]
  }

  Element AeroCable C5 { // cable 5
    length = 1;  // [meters]
    //Ireal  = 10; // [amps]
    //Iimag  = 0;  // [amps]
  }

  Element AeroCable C6 { // cable 6
    length = 1;  // [meters]
    //Ireal  = 10; // [amps]
    //Iimag  = 0;  // [amps]
  }

  Element AeroCable C7 { // cable 7
    length = 1;  // [meters]
    //Ireal  = 10; // [amps]
    //Iimag  = 0;  // [amps]
  }

  Element AeroCable C8 { // cable 8
    length = 1;  // [meters]
    //Ireal  = 10; // [amps]
    //Iimag  = 0;  // [amps]
  }

  Element Rectifier R1 {
    Vreal     = 1000;  // [volts]
    Vimag     = 0;    // [volts]
    effDes    = 1; // [100 %]
    frequency = 400;  // [Hz]
  }

  Element ConstantPowerLoad L1 { // load 1
    Vreal    = 1000; // [volts]
    Vimag    = 0;   // [volts]
    Pdemand  = 5;   // [kilowatts]
    pfDemand = 1;
  }

  Element ConstantPowerLoad L2 { // load 2
    Vreal    = 1000; // [volts]
    Vimag    = 0;   // [volts]
    Pdemand  = 8;   // [kilowatts]
    pfDemand = 1;
  }

  Element ConstantPowerLoad L3 { // load 3
    Vreal    =  1000; // [volts]
    Vimag    =  0;   // [volts]
    Pdemand  =  1;   // [kilowatts]
    pfDemand =  1;
  }

  /**
  -----------
  | Diagram |
  -----------
  -------------------------------------------------------------------------------------------
  |                                                                                         |
  |                            Branch 3                                                     |
  | Branch 1               |-> Cbl (C4) -> CPL (L1)                                         |
  | Src (S1) -> Cbl (C1) ->|                                                                |
  |                        |   Branch 4                                                     |
  |              Node (E1) |-> Cbl (C5) -> CPL (L2)                                         |
  | Branch 2               |                                                                |
  | Src (S2) -> Cbl (C2) ->|   Branch 5                                                     |
  |                        |-> Cbl (C6) -> Rect (R1) -> Cbl (C8) ->|                        |
  |                                                                |   Branch 6             |
  |                                                      Node (E2) |-> Cbl (C7) -> CPL (L3) |
  |                                         Branch 7               |                        |
  |                                         Src (B1) -> Cbl (C3) ->|                        |
  |                                                                                         |
  -------------------------------------------------------------------------------------------
  
  How to set up the solver sequence(If propagateEpsSolverListAndPowerTypes() cannot automatically set up the solverSequence string):
  1.	Declare all parts/sources/cables/nodes in a branch or by themselves that do not require input from other components in solverSequence.
    solverSequence = {
      "S1","C1",      // Branch 1
      "S2","C2",      // Branch 2
      "B1","C3",      // Branch 7
    };
  2. In the order you want the components to run, declare all components that require input from the previous branches/components declared. 
     If a branch/component requires input that has not yet been declared in solverSequence do not declare that component in solverSequence 
     until all the necessary branches/components have been declared beforehand.
    solverSequence = {
      "S1","C1",      // Branch 1
      "S2","C2",      // Branch 2
      "B1","C3",      // Branch 7
      "E1",           // Node
      "C4","L1",      // Branch 3
      "C5","L2",      // Branch 4
      "C6","R1","C8", // Branch 5
      "E2",           // Node
      "C7","L3"       // Branch 6
    };
  **/

  // Branch 1
  linkPorts("S1.EP_O", "C1.EP_I", "PORT1");
  // linkPortI("S1.EP_O", "C1.EP_I");
  linkPorts("C1.EP_O", "E1.EP_I1", "PORT2");
  // linkPortI("C1.EP_O", "E1.EP_I1");

  // Branch 2
  linkPorts("S2.EP_O", "C2.EP_I", "PORT3");
  // linkPortI("S2.EP_O", "C2.EP_I");
  linkPorts("C2.EP_O", "E1.EP_I2", "PORT4");
  // linkPortI("C2.EP_O", "E1.EP_I2");

  // Branch 3
  linkPorts("E1.EP_O1", "C4.EP_I", "PORT5");
  // linkPortI("E1.EP_O1", "C4.EP_I");
  linkPorts("C4.EP_O", "L1.EP_I", "PORT6");
  // linkPortI("C4.EP_O", "L1.EP_I");

  // Branch 4
  linkPorts("E1.EP_O2", "C5.EP_I", "PORT7");
  // linkPortI("E1.EP_O2", "C5.EP_I");
  linkPorts("C5.EP_O", "L2.EP_I", "PORT8");
  // linkPortI("C5.EP_O", "L2.EP_I");

  // Branch 5
  linkPorts("E1.EP_O3", "C6.EP_I", "PORT9");
  // linkPortI("E1.EP_O3", "C6.EP_I");
  linkPorts("C6.EP_O", "R1.EP_I", "PORT10");
  // linkPortI("C6.EP_O", "R1.EP_I");
  linkPorts("R1.EP_O", "C8.EP_I", "PORT11");
  // linkPortI("R1.EP_O", "C8.EP_I");
  linkPorts("C8.EP_O", "E2.EP_I1", "PORT12");
  // linkPortI("C8.EP_O", "E2.EP_I1");

  // Branch 6
  linkPorts("E2.EP_O", "C7.EP_I", "PORT13");
  // linkPortI("E2.EP_O", "C7.EP_I");
  linkPorts("C7.EP_O", "L3.EP_I", "PORT14");
  // linkPortI("C7.EP_O", "L3.EP_I");

  // Branch 7
  linkPorts("B1.EP_O", "C3.EP_I", "PORT15");
  // linkPortI("B1.EP_O", "C3.EP_I");
  linkPorts("C3.EP_O", "E2.EP_I2", "PORT16");
  // linkPortI("C3.EP_O", "E2.EP_I2");
  
}

/*******************************************************************************
© Copyright 2003. The U.S. Government, as Represented by the Administrator of
the National Aeronautics and Space Administration (NASA). All rights reserved.
Includes content licensed from the U.S. Government, National Aeronautics and
Space Administration under United States Copyright Registration Numbers
V3503D364 and V3482D344.
© 2008-2015 NPSS® Consortium, www.NPSSConsortium.org/AllRightsReserved
*******************************************************************************/

/*******************************************************************************
NPSS® software and related documentation is export controlled with an Export
Control Classification Number(ECCN) of 9D991, controlled for Anti-Terrorism
reasons, under U.S. Export Administration Regulations 15 CFR 730-774. It may
not be transferred to a country checked under anti-terrorism on the Commerce
Country Chart structure or to foreign nationals of those countries in the U.S.
or abroad without first obtaining a license from the Bureau of Industry and
Security, United States Department of Commerce. Violations are punishable by
fine, imprisonment, or both.
*******************************************************************************/

/*******************************************************************************
This example is intended to test the aero cable sizing code. It has 2 subsystems,
an AC one and a DC one. Both subsystems include a cable, with some voltage across
them. The input side of the cables see a constant voltage, and the output side
voltages are independents intended to be varied to achieve a constant power
through the cable and desired power factor as well. The system is run to design
the cables, and then run off design at the same point, as well as a point with
increased power to see how variables change
*******************************************************************************/

// add in electric port
#include "ElectricPort.prt"
#include "InterpretedPort.int"

//include viewers
#include "npssel.view"
#include "npssel_runtime.view"

MODELNAME = "Breaker Test";

// select model
#include "test_model/breaker_test.mdl"
#include "test_utils/TestingUtils.fnc"
solver.maxIterations = 5000;
solver.maxJacobians = 1000;
solverSequence = { "ACS", "DCS", "ACBreaker", "DCBreaker" };
setOption("switchDes","DESIGN");
					
autoSolverSetup();

cout << "--- On Design ---" << endl;
// cout << solverSequence << endl;
// cout << endl << solver.dependentNames << endl << solver.independentNames << endl;

// Initial guesses
ACBreaker.Ireal = 1100;
ACBreaker.Iimag = 0;
DCBreaker.Ireal = 1100;
DCBreaker.Iimag = 0;
real errTol = 0.000001;

run();
printOutput();

// ACBreaker Tests
real effCalc = ((ACBreaker.EP_I.S.r - ACBreaker.EP_I.I.mag**2* ACBreaker.Z.mag)/ ACBreaker.EP_I.S.r);
testParameterDifference("ACBreaker","Efficiency",errTol,ACBreaker.eff,effCalc);

real measCalc = (ACBreaker.EP_I.VLN.r - (ACBreaker.EP_O.VLN.r));
testParameterDifference("ACBreaker","dV_meas",errTol,ACBreaker.dV.r,measCalc);

real realCurrentDifference = (ACBreaker.EP_I.I.r - ACBreaker.EP_O.I.r);
real imagCurrentDifference = (ACBreaker.EP_I.I.j - ACBreaker.EP_O.I.j);
testCurrentDifference("ACBreaker",errTol,realCurrentDifference,imagCurrentDifference);

// DCBreaker Tests
effCalc = ((DCBreaker.EP_I.S.r - DCBreaker.EP_I.I.mag**2* DCBreaker.Z.mag)/ DCBreaker.EP_I.S.r);
testParameterDifference("DCBreaker","Efficiency",errTol,DCBreaker.eff,effCalc);

measCalc = (DCBreaker.EP_I.VLN.r - (DCBreaker.EP_O.VLN.r));
testParameterDifference("DCBreaker","dV_meas",errTol,DCBreaker.dV.r,measCalc);

realCurrentDifference = (DCBreaker.EP_I.I.r - DCBreaker.EP_O.I.r);
imagCurrentDifference = (DCBreaker.EP_I.I.j - DCBreaker.EP_O.I.j);
testCurrentDifference("DCBreaker",errTol,realCurrentDifference,imagCurrentDifference);


cout << "--- Off Design ---" << endl;
setOption("switchDes","OFFDESIGN");
// For off design, stop varying the source.
ACS.ind_Iimag.autoSetup = FALSE;
ACS.dep_PF.autoSetup    = FALSE;
ACS.ind_Ireal.autoSetup = FALSE;
ACS.dep_Power.autoSetup = FALSE;
DCS.ind_Ireal.autoSetup = FALSE;
DCS.dep_Power.autoSetup = FALSE;
autoSolverSetup();
// cout << solverSequence << endl;//BPM: this is order of execution of components.
// cout << endl << solver.dependentNames << endl << solver.independentNames << endl;//BPM: would use to verify model set up right

// Run off-design, same inputs
run();
printOutput();

// ACBreaker Tests
effCalc = ((ACBreaker.EP_I.S.r - ACBreaker.EP_I.I.mag**2* ACBreaker.Z.mag)/ ACBreaker.EP_I.S.r);
testParameterDifference("ACBreaker","Efficiency",errTol,ACBreaker.eff,effCalc);

measCalc = (ACBreaker.EP_I.VLN.r - (ACBreaker.EP_O.VLN.r));
testParameterDifference("ACBreaker","dV_meas",errTol,ACBreaker.dV.r,measCalc);

realCurrentDifference = (ACBreaker.EP_I.I.r - ACBreaker.EP_O.I.r);
imagCurrentDifference = (ACBreaker.EP_I.I.j - ACBreaker.EP_O.I.j);
testCurrentDifference("ACBreaker",errTol,realCurrentDifference,imagCurrentDifference);

// DCBreaker Tests
effCalc = ((DCBreaker.EP_I.S.r - DCBreaker.EP_I.I.mag**2* DCBreaker.Z.mag)/ DCBreaker.EP_I.S.r);
testParameterDifference("DCBreaker","Efficiency",errTol,DCBreaker.eff,effCalc);

measCalc = (DCBreaker.EP_I.VLN.r - (DCBreaker.EP_O.VLN.r));
testParameterDifference("DCBreaker","dV_meas",errTol,DCBreaker.dV.r,measCalc);

realCurrentDifference = (DCBreaker.EP_I.I.r - DCBreaker.EP_O.I.r);
imagCurrentDifference = (DCBreaker.EP_I.I.j - DCBreaker.EP_O.I.j);
testCurrentDifference("DCBreaker",errTol,realCurrentDifference,imagCurrentDifference);

// Run off-design, increase power by increasing voltage drop (decrease voltage on output side of Breaker.
// ACS.Vreal *= 0.9999;
// ACS.Vimag /= 0.9;
// DCS.Vreal *= 0.99945;

// run();
// printOutput();



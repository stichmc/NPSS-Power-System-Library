/*******************************************************************************
© Copyright 2003. The U.S. Government, as Represented by the Administrator of
the National Aeronautics and Space Administration (NASA). All rights reserved.
Includes content licensed from the U.S. Government, National Aeronautics and
Space Administration under United States Copyright Registration Numbers
V3503D364 and V3482D344.
© 2008-2015 NPSS® Consortium, www.NPSSConsortium.org/AllRightsReserved
*******************************************************************************/

/*******************************************************************************
NPSS® software and related documentation is export controlled with an Export
Control Classification Number(ECCN) of 9D991, controlled for Anti-Terrorism
reasons, under U.S. Export Administration Regulations 15 CFR 730-774. It may
not be transferred to a country checked under anti-terrorism on the Commerce
Country Chart structure or to foreign nationals of those countries in the U.S.
or abroad without first obtaining a license from the Bureau of Industry and
Security, United States Department of Commerce. Violations are punishable by
fine, imprisonment, or both.
*******************************************************************************/

// Make GasTbl the default thermopackage
// #ifndef THERMO
// #define THERMO GasTbl
// #endif

//include the power train components 
//#include "PTE_Viewer.view"
#include "npssel.view"
#include "npssel_runtime.view"

MODELNAME = "battery_test";

//model file
#include "test_model/battery_test.mdl"
#include "test_utils/TestingUtils.fnc"

/************************
On design
************************/
setOption("switchDes","DESIGN"); 
autoSolverSetup();
//solver.removeIndependent( "CLoad.ind_Vimag" );
//solver.solutionMode = "ONE_PASS";
//solver.switchUBC = "ON";

solver.maxIterations=5000;
solver.maxJacobians=5000;
solver.defaultPerturbation = 0.0001; // tell the solver not to perturb so far when calcing jacobian. default: 0.001
//solver.defaultDxLimit = 0.03;
cout << solverSequence << endl;
cout << endl << "Dependents:" << endl << solver.dependentNames << endl << 
"Independents:" << endl << solver.independentNames << endl;

// Constant power load 14 W for Case 0 and 1
run();
BFPrintOutput();
page.display();  // output data to out file

// Li_ion_battery Test
real errTol = 0.000001;
real VoutCalc = (Li_ion_battery.Voc - (Li_ion_battery.EP_O.I.r*Li_ion_battery.RTotal));
testParameterDifference("Li_ion_battery","Volatage Out",errTol,Li_ion_battery.Vout,VoutCalc);

/************************
Off design
************************/

setOption("switchDes","OFFDESIGN"); 
autoSolverSetup();

CASE++; run();
BFPrintOutput();
page.display(); 

// Li_ion_battery Test
VoutCalc = (Li_ion_battery.Voc - (Li_ion_battery.EP_O.I.r*Li_ion_battery.RTotal));
testParameterDifference("Li_ion_battery","Volatage Out",errTol,Li_ion_battery.Vout,VoutCalc);

CLoad.Pdemand = -120.; // kw Charge the battery roughly at 1 C (14 W) 

// Constant power load -14 W for Case 2
CASE++; run();
BFPrintOutput();
page.display();

// Li_ion_battery Test
VoutCalc = (Li_ion_battery.Voc - (Li_ion_battery.EP_O.I.r*Li_ion_battery.RTotal));
testParameterDifference("Li_ion_battery","Volatage Out",errTol,Li_ion_battery.Vout,VoutCalc);

// Setup a transient run to match JCC's Simulink data
CLoad.Pdemand = 10.; // initial power point in profile
run(); // do another steady-state run just to initialize us.

// Li_ion_battery Test
VoutCalc = (Li_ion_battery.Voc - (Li_ion_battery.EP_O.I.r*Li_ion_battery.RTotal));
testParameterDifference("Li_ion_battery","Volatage Out",errTol,Li_ion_battery.Vout,VoutCalc);

// BTW the Simulink model has NO cooling, so to represent that, just zero out the heat transfer resistance
TMS.R_cool = 0;

// Also start out the temperature at 22 C to match the data
Li_ion_battery.T_batt = 22;
Li_ion_battery.S_eThermMass.T = 22. * 9./5. + 491.67; // 22 C converted to R

// Turn on integrator for battery SOC
Li_ion_battery.ind_SOC.autoSetup = TRUE;
Li_ion_battery.integ_SOC.autoSetup = TRUE;

setOption("switchDes","OFFDESIGN"); 
setOption("solutionMode", "TRANSIENT");
transient.stopTime = 6560.0;
transient.baseTimeStep = 0.1;
transient.setup();
initializeHistory();
autoSolverSetup();

solver.defaultPerturbation = 0.000005;
solver.defaultDxLimit = 0.001;
//solver.solutionMode = "ONE_PASS";

cout << "Transient Solver Vars = " << endl << solver.dependentNames << endl << solver.independentNames << endl;

// Transient data out to a CSV file for plotting
OutFileStream transientCSVStream { filename = "output/batt_transient.csv"; } 

// Write the CSV headers
transientCSVStream << "Li_ion_battery.Voc,";
transientCSVStream << "Li_ion_battery.Vout,";
transientCSVStream << "Li_ion_battery.Q_heat,";
transientCSVStream << "Li_ion_battery.R_0,";
transientCSVStream << "Li_ion_battery.R_Th,";
transientCSVStream << "Li_ion_battery.EP_O.I.r,";
transientCSVStream << "Li_ion_battery.EP_O.S.r,";
transientCSVStream << "Li_ion_battery.T_batt,";
transientCSVStream << "Li_ion_battery.S_eThermMass.T,";
transientCSVStream << "Li_ion_battery.SOC,";
transientCSVStream << "Li_ion_battery.dSOCqdt,";
transientCSVStream << "Li_ion_battery.C_rate,";
transientCSVStream << "time" << endl;

// Use a variable to print only every 100 timesteps.
real time_old = 0;
void csvTransientPrint()
{
    transientCSVStream << Li_ion_battery.Voc << ", ";
    transientCSVStream << Li_ion_battery.Vout << ", ";
    transientCSVStream << Li_ion_battery.Q_heat << ", ";
    transientCSVStream << Li_ion_battery.R_0 << ", ";
    transientCSVStream << Li_ion_battery.R_Th << ", ";
    transientCSVStream << Li_ion_battery.EP_O.I.r << ", ";
    transientCSVStream << Li_ion_battery.EP_O.S.r << ", ";
    transientCSVStream << Li_ion_battery.T_batt << ", ";
    transientCSVStream << Li_ion_battery.S_eThermMass.T << ", ";
    transientCSVStream << Li_ion_battery.SOC << ", ";
    transientCSVStream << Li_ion_battery.dSOCqdt << ", ";
    transientCSVStream << Li_ion_battery.C_rate << ", ";
    transientCSVStream << time << endl;

    if (time-time_old >= 300)
    {
        cout << "T_batt (oC), "       << Li_ion_battery.T_batt << ", ";
        //cout << "HeatRate (BTU/s), "  << Li_ion_battery.Q_heat << ", ";
        cout << "BattCurrent (A), "   << Li_ion_battery.EP_O.I.r << ", ";
        cout << "BattSOC, "           << Li_ion_battery.SOC << ", ";
        cout << "BattVoltage (V), "   << Li_ion_battery.EP_O.V.r << ", ";
        cout << "C-rate, "            << Li_ion_battery.C_rate << ", ";
        cout << "CASE, "              << CASE << ", ";
        cout << "time (s), "              << time << endl;
        time_old = time;
    }
}

void transient_profile() {
    // Based time points
    if ( time < 570 ) { CLoad.Pdemand = 10.; }
    else if ( time < 855 ) { CLoad.Pdemand = 0.; } // BPM: if 0 causes failure, put in a small value (0.1)
    else if ( time < 1000 ) { CLoad.Pdemand = 119.5 ; }
    else if ( time < 1415 ) { CLoad.Pdemand = 0.; }
    else if ( time < 1565 ) { CLoad.Pdemand = 120.; }
    else if ( time < 3640 ) { CLoad.Pdemand = 60.; }
    else if ( time < 4100 ) { CLoad.Pdemand = 18.5; }
    else if ( time < 4620 ) { CLoad.Pdemand = 0.5; }
    else if ( time < 4760 ) { CLoad.Pdemand = 79.5; }
    else if ( time < 5680 ) { CLoad.Pdemand = 6.5; }
    else if ( time < 6600 ){ CLoad.Pdemand = 0.;}

    // Stop if battery gets fully drained (or close to it)
    if (Li_ion_battery.SOC <= 0.01) {
        // quit();
    }
}

postsolverSequence = { "csvTransientPrint", "transient_profile" };
run();

// Li_ion_battery Test
VoutCalc = (Li_ion_battery.Voc - (Li_ion_battery.EP_O.I.r*Li_ion_battery.RTotal));
testParameterDifference("Li_ion_battery","Volatage Out",errTol,Li_ion_battery.Vout,VoutCalc);

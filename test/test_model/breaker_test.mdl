/***
 -------------------------------------------------------------------------------
 |                                                                             |
 | NASA Glenn Research Center                                                  |
 | 21000 Brookpark Rd 		                                                   |
 | Cleveland, OH 44135 	                                                       |
 |                                                                             |
 | File Name:     breaker_test.mdl                                             |
 | Author(s):	    George Thomas, Jeffrey Csank, David Sadey, Tom Lavelle,    |
 |     				Michael Stich                                              |
 | Date(s):       February 2019, May 2023                                      |
 |                                                                             |
 | Description:   Run the Breaker element on and off-design.                   |
 |                                                                             |
 -------------------------------------------------------------------------------
***/
#include "test/test_src/SimpleTestClass.int"
#include "consort_fix.fnc"

real defaultFrequency = 400.;

SimpleTest ACS{
	// Set up frequency
	EP_O.frequency = defaultFrequency;
	EP_I.frequency = defaultFrequency;
	void calculate(){
		Icomplex.set(Ireal,Iimag);
		Vcomplex.set(1000,cmplx_zero);
		EP_O.setIVRMS(Icomplex, Vcomplex); 
		//EP_O.setIVRMS( Ireal,Iimag, 1000., 0.);
		//EP_I.setIVRMS( 0, 0., Vreal, Vimag );
	}
}
Element Breaker ACBreaker {//ACBreaker = instance of element Breaker
	effDes=0.995;
  	SpecificPower=250.0;
}

ACS.EP_O.setOption("ElectricPowerType","AC3");
ACS.EP_I.setOption("ElectricPowerType","AC3");
ACBreaker.EP_O.setOption("ElectricPowerType","AC3");
ACBreaker.EP_I.setOption("ElectricPowerType","AC3");


SimpleTest DCS{
	// No imaginary stuff for a DC source
	ind_Iimag.autoSetup = FALSE;
	dep_PF.autoSetup = FALSE;
	void calculate(){
		Icomplex.set(Ireal,Iimag);
		Vcomplex.set(1000.,cmplx_zero);
		EP_O.setIVRMS(Icomplex, Vcomplex); 
		//EP_O.setIVRMS( Ireal, 0., 1000., 0.);//BPM: Re and Im of I and Re and Im of V, respectively.
		//EP_I.setIVRMS( 0, 0., Ireal, 0. );//BPM: solver varies Vreal until dependent conditions met.
	}
}
Element Breaker DCBreaker {
	effDes=0.995;
  	SpecificPower=250.0;
}

DCS.EP_O.setOption("ElectricPowerType","DC");
DCS.EP_I.setOption("ElectricPowerType","DC");
DCBreaker.EP_O.setOption("ElectricPowerType","DC");
DCBreaker.EP_I.setOption("ElectricPowerType","DC");

linkPorts("ACS.EP_O", "ACBreaker.EP_I", "PORT1");
// linkPortI( "ACS.EP_O", "ACBreaker.EP_I" );
linkPorts("ACBreaker.EP_O", "ACS.EP_I", "PORT2");
// linkPortI( "ACBreaker.EP_O", "ACS.EP_I" );
linkPorts("DCS.EP_O", "DCBreaker.EP_I", "PORT3");
// linkPortI( "DCS.EP_O", "DCBreaker.EP_I" );
linkPorts("DCBreaker.EP_O", "DCS.EP_I", "PORT4");
// linkPortI( "DCBreaker.EP_O", "DCS.EP_I" );


void printOutput() {
	Complex ACS_EP_O_VLN;
	ACS_EP_O_VLN = ACS.EP_O.VLN;
	Complex ACS_EP_I_VLN;
	ACS_EP_I_VLN = ACS.EP_I.VLN;
	Complex ACS_EP_O_S;
	ACS_EP_O_S = ACS.EP_O.S;
	Complex ACS_EP_I_S;
	ACS_EP_I_S = ACS.EP_I.S;
	Complex DCS_EP_O_S;
	DCS_EP_O_S = DCS.EP_O.S;
	Complex DCS_EP_I_S;
	DCS_EP_I_S = DCS.EP_I.S;
	Complex DCS_EP_O_V;
	DCS_EP_O_V = DCS.EP_O.V;
	Complex ACS_EP_O_V;
	ACS_EP_O_V = ACS.EP_O.V;
	Complex ACS_EP_O_I;
	ACS_EP_O_I = ACS.EP_O.I;

	real ACS_EP_O_VLN_mag = sqrt((ACS_EP_O_VLN.getReal()**2) + (ACS_EP_O_VLN.getImag()**2));
	real ACS_EP_I_VLN_mag = sqrt((ACS_EP_I_VLN.getReal()**2) + (ACS_EP_I_VLN.getImag()**2));
	real ACS_EP_O_VLN_phaseDeg = ((180./PI) * atan2(ACS_EP_O_VLN.getImag(), ACS_EP_O_VLN.getReal()));
	real ACS_EP_I_VLN_phaseDeg = ((180./PI) * atan2(ACS_EP_I_VLN.getImag(), ACS_EP_I_VLN.getReal()));
	real ACS_EP_O_S_phase = (atan2(ACS_EP_O_S.getImag(), ACS_EP_O_S.getReal()));

	cout << "CASE #" << CASE++ << endl;
	cout << " AC Breaker Efficiency = " << ACBreaker.eff << endl;
	cout << " AC Breaker Designed Efficiency = " << ACBreaker.effDes << endl;
	cout << " DC Breaker Efficiency = " << DCBreaker.eff << endl;//BPM: (DCPOut/DCPOut)^2 = DC eff
	cout << " DC Breaker Designed Efficiency = " << DCBreaker.effDes << endl;
	cout << "AC R+jX = " << ACBreaker.R << "+j" << ACBreaker.L*(2*PI*ACBreaker.EP_I.frequency) << endl;
	cout << " ACS.EP_O.VLN " << ACS_EP_O_VLN.getReal() << "+j" << ACS_EP_O_VLN.getImag();
	cout << " ACS.EP_O.VLN (polar) " << ACS_EP_O_VLN_mag << " angle " << ACS_EP_O_VLN_phaseDeg << endl;
	cout << " ACS.EP_I.VLN " << ACS_EP_I_VLN.getReal() << "+j" << ACS_EP_I_VLN.getImag();
	cout << " ACS.EP_I.VLN (polar) " << ACS_EP_I_VLN_mag << " angle " << ACS_EP_I_VLN_phaseDeg << endl;	
	cout << "   ACVout = " << ACS_EP_O_V.getReal() << "+j" << ACS_EP_O_V.getImag();
	cout << " \t ACPin = " << ACS_EP_O_S.getReal() << "+j" << ACS_EP_O_S.getImag();
	cout << " \t ACIout = " << ACS_EP_O_I.getReal() << "+j" << ACS_EP_O_I.getImag();
	cout << " \t\t ACPout = " << ACS_EP_I_S.getReal() << "+j" << ACS_EP_I_S.getImag();
	cout << " \t PF at Breaker input = " << cos(ACS_EP_O_S_phase) << endl;
	cout << "DC R = " << DCBreaker.R;
	cout << " \t\t\t  DCVout = " << DCS_EP_O_V.getReal();
	cout << " \t\t DCPin = " << DCS_EP_O_S.getReal();
	cout << " \t\t\t DCPout = " << DCS_EP_I_S.getReal() << endl;

	Complex ACBreaker_dV;
	ACBreaker_dV = ACBreaker.dV;
	Complex ACBreaker_EP_I_VLN;
	ACBreaker_EP_I_VLN = ACBreaker.EP_I.VLN;
	Complex ACBreaker_EP_O_VLN;
	ACBreaker_EP_O_VLN = ACBreaker.EP_O.VLN;
	Complex ACBreaker_EP_O_I;
	ACBreaker_EP_O_I = ACBreaker.EP_O.I;

	cout << "AC: dV_calc =" << ACBreaker_dV.getReal();
	cout << "+j" << ACBreaker_dV.getImag();
	cout << "\t  dV_meas =" << ACBreaker_EP_I_VLN.getReal() - (ACBreaker_EP_O_VLN.getReal());
	cout << "+j" << ACBreaker_EP_I_VLN.getImag() - (ACBreaker_EP_O_VLN.getImag());
	cout << " \t dV_error =" << ACBreaker_EP_I_VLN.getReal() - (ACBreaker_EP_O_VLN.getReal()+ACBreaker_dV.getReal());
	cout << "+j" << ACBreaker_EP_I_VLN.getImag() - (ACBreaker_EP_O_VLN.getImag()+ACBreaker_dV.getImag());
	cout << " \t\t\t I =" << ACBreaker_EP_O_I.getReal();
	cout << "+j" << ACBreaker_EP_O_I.getImag()  << endl;

	Complex DCBreaker_dV;
	DCBreaker_dV = DCBreaker.dV;
	Complex DCBreaker_EP_I_VLN;
	DCBreaker_EP_I_VLN = DCBreaker.EP_I.VLN;
	Complex DCBreaker_EP_O_VLN;
	DCBreaker_EP_O_VLN = DCBreaker.EP_O.VLN;
	Complex DCBreaker_EP_O_I;
	DCBreaker_EP_O_I = DCBreaker.EP_O.I;

	cout << "DC: dV_calc =" << DCBreaker_dV.getReal();
	cout << "+j" << DCBreaker_dV.getImag();
	cout << "   \t\t  dV_meas =" << DCBreaker_EP_I_VLN.getReal() - (DCBreaker_EP_O_VLN.getReal());
	cout << "+j" << DCBreaker_EP_I_VLN.getImag() - (DCBreaker_EP_O_VLN.getImag());
	cout << "   \t dV_error =" << DCBreaker_EP_I_VLN.getReal() - (DCBreaker_EP_O_VLN.getReal()+DCBreaker_dV.getReal());
	cout << "+j" << DCBreaker_EP_I_VLN.getImag() - (DCBreaker_EP_O_VLN.getImag()+DCBreaker_dV.getImag());
	cout << " \t\t\t I =" << DCBreaker_EP_O_I.getReal();
	cout << "+j" << DCBreaker_EP_O_I.getImag()  << endl << endl;
}

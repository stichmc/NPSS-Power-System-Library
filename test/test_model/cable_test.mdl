/***
 -------------------------------------------------------------------------------
 |                                                                             |
 | NASA Glenn Research Center                                                  |
 | 21000 Brookpark Rd 		                                                   |
 | Cleveland, OH 44135 	                                                       |
 |                                                                             |
 | File Name:     cable_test.mdl                                               |
 | Author(s):	    George Thomas, Jeffrey Csank, David Sadey, Tom Lavelle     |
 | Date(s):       February 2019                                                |
 |                                                                             |
 | Description:   Run the cable element on and off-design.                     |
 |                                                                             |
 -------------------------------------------------------------------------------
***/
#include "test/test_src/SimpleTestClass.int"

real defaultFrequency = 400.;

SimpleTest ACS{
	// Set up frequency
	EP_O.frequency = defaultFrequency;
	EP_I.frequency = defaultFrequency;
	void calculate(){
		Icomplex.set(Ireal,Iimag);
		Vcomplex.set(1000,cmplx_zero);
		//EP_O.setIVRMS( 0, 0., 15., 8.66025403784438); // This is the VLL representation of VLN = 10+j0
		EP_O.setIVRMS(Icomplex, Vcomplex);
		//EP_O.setIVRMS(Ireal,Iimag, 1000., 0.);
		//EP_I.setIVRMS( 0, 0., Ireal, Iimag );
	}
}
Element AeroCable ACCable {
	length=30;
}
ACS.EP_O.setOption("ElectricPowerType","AC3");
ACS.EP_I.setOption("ElectricPowerType","AC3");
ACCable.EP_O.setOption("ElectricPowerType","AC3");
ACCable.EP_I.setOption("ElectricPowerType","AC3");


SimpleTest DCS{
	// No imaginary stuff for a DC source
	ind_Iimag.autoSetup = FALSE;
	dep_PF.autoSetup = FALSE;
	void calculate(){
		EP_O.setIVRMS(EP_O.I, EP_O.V); 
		//EP_O.setIVRMS(Ireal, 0, 1000., 0.);
		//EP_I.setIVRMS( 0, 0., Vreal, 0. );
	}
}
Element AeroCable DCCable {
	length=30;
}
DCS.EP_O.setOption("ElectricPowerType","DC");
DCS.EP_I.setOption("ElectricPowerType","DC");
DCCable.EP_O.setOption("ElectricPowerType","DC");
DCCable.EP_I.setOption("ElectricPowerType","DC");

linkPorts("ACS.EP_O", "ACCable.EP_I", "PORT1");
// linkPortI( "ACS.EP_O", "ACCable.EP_I" );
linkPorts("ACCable.EP_O", "ACS.EP_I", "PORT2");
// linkPortI( "ACCable.EP_O", "ACS.EP_I" );
linkPorts("DCS.EP_O", "DCCable.EP_I", "PORT3");
// linkPortI( "DCS.EP_O", "DCCable.EP_I" );
linkPorts("DCCable.EP_O", "DCS.EP_I", "PORT4");
// linkPortI( "DCCable.EP_O", "DCS.EP_I" );

void printOutput() {
	cout << "AC R+jX = " << ACCable.R << "+j" << ACCable.L*(2*PI*ACCable.EP_I.frequency);
	cout << "   ACIout = " << ACS.Ireal << "+j" << ACS.Iimag;
	cout << " \t ACPin = " << ACS.EP_O.S.r << "+j" << ACS.EP_O.S.j;
	cout << " \t\t ACPout = " << ACS.EP_I.S.r << "+j" << ACS.EP_I.S.j;
	cout << " \t PF at cable input = " << cos(ACS.EP_O.S.phase) << endl;
	cout << "DC R = " << DCCable.R;
	cout << " \t\t\t  DCVout = " << DCS.Ireal;
	cout << " \t\t DCPin = " << DCS.EP_O.S.r;
	cout << " \t\t\t DCPout = " << DCS.EP_I.S.r << endl;

	cout << "AC: dV_calc =" << ACCable.dV.r;
	//cout << "AC: dV_calc =" << ACCable.Ireal_drop;
	cout << "+j" << ACCable.dV.j;
	//cout << "+j" << ACCable.Vimag_drop;
	cout << "\t  dV_meas =" << ACCable.EP_I.VLN.r - (ACCable.EP_O.VLN.r);
	cout << "+j" << ACCable.EP_I.VLN.j - (ACCable.EP_O.VLN.j);
	cout << " \t dV_error =" << ACCable.EP_I.VLN.r - (ACCable.EP_O.VLN.r+ACCable.dV.r);
	//cout << " \t dV_error =" << ACCable.EP_I.VLN.r - (ACCable.EP_O.VLN.r+ACCable.Vreal_drop);
	cout << "+j" << ACCable.EP_I.VLN.j - (ACCable.EP_O.VLN.j+ACCable.dV.j);
	//cout << "+j" << ACCable.EP_I.VLN.j - (ACCable.EP_O.VLN.j+ACCable.Vimag_drop);
	cout << " \t\t\t I =" << ACCable.EP_O.I.r;
	cout << "+j" << ACCable.EP_O.I.j  << endl;

	cout << "DC: dV_calc =" << DCCable.dV.r;
	//cout << "DC: dV_calc =" << DCCable.Vreal_drop;
	cout << "+j" << DCCable.dV.j;
	//cout << "+j" << DCCable.Vimag_drop;
	cout << "   \t\t  dV_meas =" << DCCable.EP_I.VLN.r - (DCCable.EP_O.VLN.r);
	cout << "+j" << DCCable.EP_I.VLN.j - (DCCable.EP_O.VLN.j);
	cout << "   \t dV_error =" << DCCable.EP_I.VLN.r - (DCCable.EP_O.VLN.r+DCCable.dV.r);
	//cout << "   \t dV_error =" << DCCable.EP_I.VLN.r - (DCCable.EP_O.VLN.r+DCCable.Vreal_drop);
	cout << "+j" << DCCable.EP_I.VLN.j - (DCCable.EP_O.VLN.j+DCCable.dV.j);
	//cout << "+j" << DCCable.EP_I.VLN.j - (DCCable.EP_O.VLN.j+DCCable.Vimag_drop);
	cout << " \t\t\t I =" << DCCable.EP_O.I.r;
	cout << "+j" << DCCable.EP_O.I.j  << endl << endl;
}

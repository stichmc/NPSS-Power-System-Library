/***
 -------------------------------------------------------------------------------
 |                                                                             |
 | NASA Glenn Research Center                                                  |
 | 21000 Brookpark Rd 		                                                   |
 | Cleveland, OH 44135 	                                                       |
 |                                                                             |
 | File Name:     power_propagation.run                                        |
 | Author(s):     Jonathan Fuzaro Alencar                                      |
 | Date(s):       February 2020                                                |
 |                                                                             |
 | Description:   Run file for automatic power propagation mode.               |
 |                                                                             |
 -------------------------------------------------------------------------------
***/

/**
 ---------
 | Setup |
 ---------
**/

#include "npssel.view"
#include "IOUtils.fnc"

#include "power_propagation.mdl"

MODELNAME = "Power Type Propagation Test";

/**
 --------------------
 | Run Solver Cases |
 --------------------
**/

string ports[] = list("ElectricPort", TRUE);

cout << "Before power propagation: \n";
printPortPowerTypes();

powerPropagation {
    string var[] = propagateEpsSolverListAndPowerTypes();
    solverSequence = var;
}
// Setting initial guesses for currents
powerPropagation {
    E1.Ireal_EP_O1 = (L1.Pdemand/E1.Vreal);
    E1.Ireal_EP_O2 = (L2.Pdemand/E1.Vreal);
    E1.Ireal_EP_O3 = (L3.Pdemand/E1.Vreal);
    E2.Ireal_EP_O = (L3.Pdemand/E2.Vreal);
}

cout << "\nAfter power propagation: \n";
printPortPowerTypes();
cout << endl;
setOption("switchDes", "DESIGN");
autoSolverSetup();
printDesignBanner("on");
//solver.solutionMode = "ONE_PASS";
cout << endl << "Solver Sequence:" << endl << solverSequence << endl;
cout << "Dependents:" << endl << solver.dependentNames << endl;
cout << "Independents:" << endl << solver.independentNames << endl;
run(); CASE++;
page.display();
printCaseStats("solver");

//cout << powerPropagation.E2.Ireal_EP_O << endl;

// TODO: once diagram drawing logic is done, call it here :)
//cout << diagram << endl;

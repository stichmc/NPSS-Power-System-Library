/***
 --------------------------------------------------------------------------------------------
 |                                                                                           |
 | NASA Glenn Research Center                                                                |
 | 21000 Brookpark Rd                                                                        |
 | Cleveland, OH 44135                                                                       |
 |                                                                                           |
 | File Name:     Battery.int                                                                |
 | Author(s):     George Thomas, Jeffrey Csank, David Sadey, Tom Lavelle, Brian Malone       |
 | Date(s):       August 2021                                                                |
 |                                                                                           |
 --------------------------------------------------------------------------------------------
***/

#ifndef __BATTERY__
#define __BATTERY__
#include "PSL_math.fnc" 

int ESO_Id_ExceededEnergyDes = (10000 * 145) + (100 * 22) + 1;
ESOregCreate(ESO_Id_ExceededEnergyDes, 1, "Energy Constraint Exceeded");

class Battery extends ElectricElement {
  
  //----------------------------
  // ****** DOCUMENTATION ******
  //----------------------------
  
  // title = "";

  description = "The " + isA() + " serves as a voltage source with constant 
  impedance. It also contains simplified logic for calculating energy consumed 
  to be used with a MDP solver setup. This energy is used to compute mass via a 
  flat assumption for specific energy. Users can also specify specific power. 
  Mass is calculated as the larger of the two masses (design power/spc power) 
  and (design energy/spc energy)";
  
  usageNotes = isA() +
  "

- The input design parameters that must be specified by the modeler when creating an instance 
of this " + isA() + " component are mass specific power (SpecificPower), design efficiency 
(effDes), frequency, and voltage (Vreal and Vimag). This component will produce electrical 
power at the specified voltage and frequency, with losses according to its design efficiency.

- When running ONDESIGN, this component will determine its output impedance, which is 
calculated such that the component operates with the specified design efficiency value.
When running OFFDESIGN, the model will run with losses according to the impedance calculated 
from the ONDESIGN run.

- This component, being a source component, must have its electricPowerType specified, and 
will propagate this power type information to components downstream of it when 
propagateEpsSolverListAndPowerTypes() is called. This component supports DC, single phase, and 3 phase AC. 

- This component produces power and includes a node. Being a component including a node, a 
voltage must be specified at this component. However, being a source component, its voltage is 
typically set to a fixed value (unless the modeler changes it to be otherwise), and it does 
not need solver variables to operate (except when running in MDP mode).

- Note that, as a component that contains a node and has its voltage known at the beginning
of the solverSequence, it uses its prePass() method to call the electrical port update 
function to pass this voltage information to electrical components that it is connected to. 
Note that in the current implementation of the NPSS Power System Library, these components 
containing nodes do not know what currents are going through their ports at the beginning of 
an iteration. Because of this, they must be connected to power transmission components (cables 
and breakers), and these transmission components must be run before node-bearing 
transformation components like this one, as the transmission components will calculate and 
populate these current values. When calculate() is called, this component's voltage and current 
will be known at its ports.  Note that this design is intended to be analogous to a common 
approach taken in fluid networks within NPSS rocket models.

- The battery block contains variables intended to be used in a multi-design-point (MDP) 
simulation. This MDP logic is intended to consist of several different assemblies containing 
systems including this source block; each one of these assemblies represents the same system 
but running at a different design point (e.g. cruise, climb, and hover for an eVTOL concept). 
To enable the solver variables that this component uses for MDP, set Option multiDes to true. 
Then for each of the design point assemblies, set the appropriate value for segmentTime (how 
long the mission segment is, in hours, that this assembly represents. Also select a segment 
that represents the most important segment and give it an initial guess value for design 
energy (energyDes). You will also need to disable autoSetup in ind_energyDes and dep_energyDes 
or otherwise remove them from all assemblies other than the main MDP one. Finally, then set up 
logic that copies energyDes from the main assembly to the other MDP assemblies before each of 
them run, and set up a solver pair at the top level that varies the design energy for the main 
mission segment, until the sum of the energies consumed in all of the segments is less than 
the design energy. For an example on setting up this MDP logic, see baseline_all_elecMDP.run.

- This component, like other power system components in the NPSS Power System Library, can 
optionally include thermal models. An optional thermal model is enabled by setting 
switchThermPort to TRUE, and plugging an EThermalMass subelement into the S_eThermMass socket. 
Doing these will add a temperature state (existing within EThermalMass) and a thermal port to 
the model. The thermal port is intended to connect this component to a second component that 
represents the mechanism by which heat is extracted from this component. This second component 
could represent a heat exchanger, cold plate, or just model heat transfer from the first 
component to the surrounding environment. For more information, see EThermalMass.

- The " + isA() + " component does not use solver variables, however it includes sizing logic. 
this logic calculates mass as well as calculates the design torque and speed values. These 
values are used by a performance map (if one is plugged into the S_map socket) to calculate 
efficiency at the current operating point. For more information about performance maps for 
this component, see MotorGeneratorMap.int";
  
  //------------------------------
  // ****** SETUP VARIABLES ******
  //------------------------------
  
  real actualSpecificPower {
    value = 0; IOstatus = "output"; // [kw/kg]
    description = "Specific power used during on-design.";
  }

  real actualSpecificEnergy {
    value = 0; IOstatus = "output"; // [wh/kg]
    description = "Specific energy used during on-design.";
  }

  eff {
    value = 0.95; IOstatus = "output"; units = "none";
    description = "Actual (calculated) efficiency of this source element.";
  }

  Loss_r {
    value = 0; IOstatus = "output"; units = "kW"; // [kilowatts]
    description = "Real component of losses in this load.";
  }

  Loss_j {
    value = 0; IOstatus = "output"; units = "kW"; // [kilowatts]
    description = "Imaginary component of losses in this load.";
  }

  Q_heat {
    value = 0; IOstatus = "output"; units = "Btu/sec"; // [BTUs / sec]
    description = "Power dissipation in BTU/s at current time.";
  }

  real T_batt {
    value = 20; IOstatus = "input"; units = "C"; // [degrees C]
    description = "Battery Temperature.";
  }

  real desired_energyDes {
    value = 10./1000.; IOstatus = "input"; units = "none"; // [kW-h]
    description = "Desired design energy capacity for this battery.";
  }

  real energyDes {
    value = 0; IOstatus = "output"; units = "none"; // [kW-h]
    description = "Actual design energy capacity for this battery.";
  }

  real SOC {
    value = 1; IOstatus = "output"; units = "none"; // [fraction]
    description = "State of charge for this battery.";
  }

  real dSOCqdt {
    value = 0; IOstatus = "output"; units = "none"; // [fraction/s]
    description = "Time derivative of state of charge for this battery (calculated in map file).";
  }

  real powerDes {
    value = 0; IOstatus = "output"; units = "none"; // [kW]
    description = "Design power for this source.";
  }

  real QDes {
    value = 0; IOstatus = "output"; units = "none"; // [kW]
    description = "Design Ah for this battery.";
  }

  real R_0 {
    value = 0.01; IOstatus = "output"; units = "none"; // [Ohm]; tR_0 in Python boring amprius_battery
    description = "Static battery output resistance.";
  }

  real R_Th {
    value = 0.01578; IOstatus = "output"; units = "none"; // [Ohm]; tR_Th in Python boring amprius_battery
    description = "Dynamic battery output resistance.";
  }

  real RTotal {
    value = 0; IOstatus = "output"; units = "none"; // [Ohm]
    description = "Total battery resistance.";
  }

  real Vout_des {
    value = 4.2;  IOstatus = "output";  units = "V"; // [volts]
    description = "Design value for battery output voltage.";
  }

  real Vout {
    value = 3.6;  IOstatus = "output";  units = "V"; // [volts]
    description = "Battery output voltage at current operating point.";
  }

  real Vout_guess {
    value = 3.6;  IOstatus = "output";  units = "V"; // [volts]
    description = "Guess value for battery output voltage at current operating point.";
  }

  real Iout_guess{
    value = 1;  IOstatus = "output";  units = "A"; // [AMPS]
    description = "Guess value for battery output current.";
  }

  real Voc {
    value = 3.7;  IOstatus = "output";  units = "V"; // [volts]
    description = "Open circuit battery voltage (before battery's output impedance).";
  }
  
  real SpecificPower {
    value = 13; IOstatus = "input"; units = "none"; // [kW/kg]
    description = "Power to weight ratio for the source.";
  }
  
  real SpecificEnergy {
    value = 130; IOstatus = "input"; units = "none"; // [W-h/kg]
    description = "Energy to weight ratio for the source.";
  }

  real C_rate_des {
    value = 1; IOstatus = "input"; units = "none"; // [-]
    description = "C-rate at design point (discharge rate normalized to capacity).";
  }

  real C_rate {
    value = 1; IOstatus = "input"; units = "none"; // [-]
    description = "C-rate at current operating point (discharge rate normalized to capacity).";
  }

  Mass {
    value = 1.; IOstatus = "output"; units = "kg"; // [kilograms]
    description = "Computed on-design mass for the source.";
  }

  //------------------------------------
  // ****** OPTION VARIABLE SETUP ******
  //------------------------------------

  Option switchDes {
    allowedValues = { "DESIGN", "OFFDESIGN" }
    description = "Determines if the element is in design or off-design mode.";
    rewritableValues = FALSE;
    trigger = TRUE;
  }

  Option switchThermPort {
    allowedValues = { "TRUE", "FALSE" }
    description = "Determines if component needs thermal port.";
    rewritableValues = FALSE;  // enables converter optimization
    trigger = TRUE;
  }
  
  //----------------------------------------------------------
  // ****** SETUP PORTS, FLOW STATIONS, SOCKETS, TABLES ******
  //----------------------------------------------------------  
  
  /* ELECTRICAL PORTS */

  ElectricOutputPort EP_O {
    description = "Electric output port.";
    //ElectricPowerType.allowedValues = { "DC" };
    setOption("ElectricPowerType", "DC"); // only DC output allowed as this is a battery pack
  }

  /* SOCKETS */

  Socket S_map {
    allowedValues = { "T_batt", "SOC", "Vout_des", "desired_energyDes" }
    description = "Socket for battery cell data map and logic to size pack from cells.";
    socketType = "BatteryCellSoCTemperatureMap"; 
  }

  Socket S_eThermMass {
    allowedValues = { "Q_heat", "Mass" }
    description = "Thermal mass socket.";
    socketType = "EThermalMass";
  }
  
  //-----------------------------------------------------
  // ******  ADD SOLVER INDEPENDENTS & DEPENDENTS  ******
  //-----------------------------------------------------

  // Solver pair to allow output voltage to sag as current and other vars vary.
  Independent ind_Vout { 
    varName = "Vout_guess"; 
    autoSetup = TRUE;
    indepRef = "1000";
    description = "Varies the battery output voltage to match Vout = Voc - Vdrop.";
  }
  Dependent dep_Vout {
    eq_lhs = "Vout";
    eq_rhs = "Vout_guess";
    autoSetup = TRUE;
  }

  Independent ind_Iout { 
    varName = "Iout_guess"; 
    autoSetup = TRUE;
    indepRef = "1000";
    description = "Varies the battery output current to match load power.";
  }

  // SOC state variable.
  Independent ind_SOC {
    varName = "SOC";
    autoSetup = FALSE;
    description = "Varies state of charge (intended to be used with SOC integrator).";
  }
  Integrator integ_SOC {
    stateName = "SOC";
    derivativeName = "dSOCqdt";
    eq_lhs = "0";
    eq_rhs = "1";
    autoSetup = FALSE;
    description = "Balances normalized capacity increments in the battery. Only intended to be used transiently.";
  }

  // Solver pair to link up battery temperature variable used for performance and the temperature state.
  Independent ind_T_batt { 
    varName = "T_batt"; 
    autoSetup = FALSE;
    indepRef = "10000";
    description = "Varies the battery temperature to match the eThermalMass temperature state variable.";
  }
  Dependent dep_T_batt {
    eq_lhs = "T_batt*9./5. + 491.67"; // deg C to deg R
    eq_rhs = "S_eThermMass.T";        // deg R
    autoSetup = FALSE;
  }
  
  //-------------------------------------------
  // ****** VARIABLE CHANGED METHODOLOGY ******
  //-------------------------------------------

  void variableChanged(string name, any oldVal) {
    if (name == "switchThermPort") {
       if (switchThermPort == "TRUE") {
          create("", "ThermalInputPort", "Q_I");
          ind_T_batt.autoSetup = TRUE;
          dep_T_batt.autoSetup = TRUE;
       }
       else {
          ind_T_batt.autoSetup = FALSE;
          dep_T_batt.autoSetup = FALSE;
       }
    }
  }

  //-----------------------------------------------
  // ****** PERFORM ENGINEERING CALCULATIONS ******
  //-----------------------------------------------
  
  void calculate() {
    
    EP_O.frequency = frequency;
    
    Complex Icomplex;
	  Complex Vcomplex;

    Icomplex.set(Iout_guess,0);
    Vcomplex.set(Vout_guess,0);
    EP_O.setIVRMS(Icomplex, Vcomplex);

    // Declare design point power. Energy is calculated in the map logic.
    powerDes = EP_O.S.r;

    // Run the battery map if it is present
    if(!S_map.isEmpty()) {
      S_map.execute();
    }
    else {    
      // Map logic will calculate number of parallel/series cells and also calculates energy design capacity.
      // However if we have no map (no pack building logic), just say our capacity is equal to the desired value.
      if (switchDes == "DESIGN") {
        energyDes = desired_energyDes;
      }
    }

    // Calculate output voltage (which the solver will force to be equal to the guess value)
    RTotal = R_0 + R_Th;
    Vout = Voc - EP_O.I.r*RTotal;

    if (switchDes == "DESIGN") {
      
      real energyBasedMass = (energyDes*1000) / SpecificEnergy; // (kW-h/1000) / (W-h/kg) = kg
      real powerBasedMass = EP_O.S.r / SpecificPower;

      if (energyBasedMass > powerBasedMass) {
        Mass = energyBasedMass; // compute mass based on assumed specific energy
      } else {
        Mass = powerBasedMass; // compute mass based on assumed specific power
      }

      actualSpecificEnergy = 1000 * energyDes/Mass; // [Wh/kg]
      actualSpecificPower = powerDes/Mass; // [kW/kg]
    }
    else {
    }

    // Output params common to both on and off design cases.
    //C_rate = EP_O.S.r / energyDes; // (design power kW * 1 hour) / (design energy in kW-h) kW/kWh
    //dSOCqdt = -C_rate/3600.; //(kW/kWh) / (1h/3600s)
    C_rate = EP_O.I.r / QDes; // (design power kW * 1 hour) / (design energy in kW-h) kW/kWh
    dSOCqdt = -EP_O.I.r/(QDes*3600.); //(kW/kWh) / (1h/3600s)
    
    C_rate = abs(C_rate); // C-rate actually does not typically have an associated sign.
    Loss_r = EP_O.I.mag**2 * RTotal / 1000.;
    Loss_j = 0;
    eff = (EP_O.S.r / (EP_O.S.r + Loss_r))**sign(EP_O.S.r);
    real KW_PER_BTU_PER_SEC = 1.05505585;
    Q_heat = sqrt(Loss_r**2 + Loss_j**2);
    Q_heat /= KW_PER_BTU_PER_SEC;

    if (switchThermPort == "TRUE") {
      // run the thermal mass model.
      if (!S_eThermMass.isEmpty()) {
        S_eThermMass.execute();
      }
    }
  }
}
#endif

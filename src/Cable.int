/***
 -------------------------------------------------------------------------------
 |                                                                             |
 | NASA Glenn Research Center                                                  |
 | 21000 Brookpark Rd 		                                                     |
 | Cleveland, OH 44135 	                                                       |
 |                                                                             |
 | File Name:     Cable.int                                                    |
 | Author(s):     Jeffrey Csank, David Sadey, Tom Lavelle       			         |
 | Date(s):       April 2018                                                   |
 |                                                                             |
 -------------------------------------------------------------------------------
***/

#ifndef __CABLE__
#define __CABLE__

#include <InterpIncludes.ncp>

class Cable extends ElectricElement {
  
  //----------------------------
  // ****** DOCUMENTATION ******
  //----------------------------  

  // title = "";

  description = "The " + isA() + " is a cable model that does not include cable sizing logic. 
It assumes a known resistance and inductance are specified and only includes performance 
calculations.";

  usageNotes = isA() +
  "

- The input design parameters that must be specified by the modeler when creating an instance 
of this " + isA() + " component are cable resistance and inductance (R and L), and mass 
specific ampacity (SpecificAmperage). In other words, the cable impedance must be known to use 
this component.

- This component supports DC and AC (single or multiphase) power (see ElectricPowerType). 
At instantiation, this component's power type is unspecified. NPSS Power System Components 
need to have a power type in order to correctly run power calculations. For this component, 
the power type is typically set by calling the propagateEpsSolverListAndPowerTypes() method at the top 
level assembly. This method is defined in ElectricPort.prt.

- This component does not contain a node, and so starts each iteration with its port voltages 
unknown. The concept in NPSS Power System Library is that all components that contain nodes 
all have a prePass() method specified that pushes node voltage information, via their ports
to all components that do not contain nodes and so do not know their voltages. The intent is 
that after all component prePass methods are automatically called, all components in the 
system will then have port voltages specified. Then during the normal iteration, components 
that don't contain nodes such as this one, will execute first. These components typically 
transmit power from one node to another and do not transform it from one kind to another 
(e.g. cables and breaker). These execute first in the solver sequence, and inside their 
calculate() methods, they calculate their currents, which are then passed via the ports, to 
all other components in the circuit. So after these nodeless transmission components 
execute, all electric port voltages and currents should be specified, and so all other 
components are free to run.

- This component, like other power system components in the NPSS Power System Library, can 
optionally include thermal models. An optional thermal model is enabled by setting 
switchThermPort to TRUE, and plugging an EThermalMass subelement into the S_eThermMass socket. 
Doing these will add a temperature state (existing within EThermalMass) and a thermal port to 
the model. The thermal port is intended to connect this component to a second component that 
represents the mechanism by which heat is extracted from this component. This second component 
could represent a heat exchanger, cold plate, or just model heat transfer from the first 
component to the surrounding environment. For more information, see EThermalMass. 
 
- Solver independents and dependents are not used in the " + isA() + " component, and there is 
no sizing logic included in this component, other than the mass calculations described above.";
  
  //------------------------------
  // ****** SETUP VARIABLES ******
  //------------------------------
  
  real R {
    value = .01;  IOstatus = "input";  units = "ohm";
  }
  
  real L {
    value = .0000796;  IOstatus = "input";  units = "H"; // [henrys]
  }
  
  real length {
    value = 1;  IOstatus = "input";  units = "m"; // [meters]
  }

  Loss_r {
    value = 0; IOstatus = "output"; units = "W"; // [watts]
    description = "Cable loss.";
  }

  Loss_j {
    value = 0; IOstatus = "output"; units = "W"; // [watts]
    description = "Cable loss.";
  }

  Q_heat {
    value = 0; IOstatus = "output"; units = "Btu/sec"; // [BTUs / sec]
    description = "Power dissipation at current time.";
  }

  Mass {
    value = 0; IOstatus = "output"; units = "kg"; // [kilograms]
    description = "Mass output of the cable.";
  }
  
  real SpecificAmperage {
    value = 170.; IOstatus = "input"; units = "none"; // [A * m / kg]
    description = "Amps to weight/length ratio for the cable.";
  }

  Complex dV, Vo;
  Complex Z;

  //------------------------------------
  // ****** OPTION VARIABLE SETUP ******
  //------------------------------------

  Option switchDes {
    allowedValues = { "DESIGN", "OFFDESIGN" }
    description = "Determines if the element is in design or off-design mode.";
    rewritableValues = FALSE;
    trigger = FALSE;
  }

  Option switchThermPort {
    allowedValues = { "TRUE", "FALSE" }
    description = "Determines if component needs thermal port.";
    rewritableValues = FALSE;  // Enables converter optimization.
    trigger = TRUE;
  }
  
  //----------------------------------------------------------
  // ****** SETUP PORTS, FLOW STATIONS, SOCKETS, TABLES ******
  //----------------------------------------------------------

  /* ELECTRICAL PORTS */

  ElectricInputPort EP_I {
    description = "Electric input port.";
  }

  ElectricOutputPort EP_O {
    description = "Electric output port.";
  }

  /* SOCKETS */

  Socket S_eThermMass {
    allowedValues = { "Q_heat", "Mass" }
    description = "Thermal mass socket.";
    socketType = "EThermalMass";
  }

  //-------------------------------------------
  // ****** VARIABLE CHANGED METHODOLOGY ******
  //-------------------------------------------

  void variableChanged(string name, any oldVal) {
    if (name == "switchThermPort") { 
      if (switchThermPort == "TRUE") {
        create("", "ThermalInputPort", "Q_I");
      }
    }

    if (name == "switchDes") {
      if (switchDes == DESIGN) {
        R.IOstatus = INPUT;
        L.IOstatus = INPUT;
        length.IOstatus = INPUT;
        SpecificAmperage.IOstatus = INPUT;
      }
      else if (switchDes == OFFDESIGN) {
        R.IOstatus = OUTPUT;
        L.IOstatus = OUTPUT;
        length.IOstatus = OUTPUT;
        SpecificAmperage.IOstatus = OUTPUT;
      }
    }
  }

  //-----------------------------------------------
  // ****** PERFORM ENGINEERING CALCULATIONS ******
  //-----------------------------------------------
  
  void calculate() {
    
    // get frequency from input port
    frequency = EP_I.frequency;
    
    Z.set(R,L*(2*PI*frequency));
    dV = EP_I.I * Z;
    Vo = EP_I.VLN - dv;

    if ((EP_I.ElectricPowerType == "AC3") && (EP_O.ElectricPowerType == "AC3")) {
      // Convert this VLN we have calculated into a VLL (port expects VLL inputs)
      Vo.ln2ll();
    } // If not AC3, then we do not need to convert, because VLL = VLN

    cmplx_temp = EP_I.I;
    Complex Icomplex;
	  Complex Vcomplex;

    // set the conditions in the port
    EP_O.frequency = EP_I.frequency;
    Icomplex.set(cmplx_temp.getReal(),cmplx_temp.getImag());
    Vcomplex.set(Vo.getReal(),Vo.getImag());
    EP_O.setIVRMS(Icomplex, Vcomplex);

    Complex EP_Input_S;
    EP_Input_S = EP_I.S;
    Complex EP_Output_S;
    EP_Output_S = EP_O.S;

    Loss_r = EP_Input_S.getReal() - EP_Output_S.getReal();
    Loss_j = EP_Input_S.getImag() - EP_Output_S.getImag();

    real KW_PER_BTU_PER_SEC = 1.05505585;
    Q_heat = sqrt(Loss_r*Loss_r + Loss_j*Loss_j);
    Q_heat /= KW_PER_BTU_PER_SEC;
    
    if (switchThermPort == "TRUE") {
      // run the thermal mass model
      if (!S_eThermMass.isEmpty()) {
        S_eThermMass.execute();
      }
    }

    eff = (EP_Output_S.getReal() / EP_Input_S.getReal())**sign(EP_Input_S.getReal());	

    if (switchDes == "DESIGN") {
      Mass = EP_I.I.mag / SpecificAmperage * length * 3; // calculate the mass of the cable
    }
  }
}
#endif

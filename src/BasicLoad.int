/***
 -------------------------------------------------------------------------------
 |                                                                             |
 | NASA Glenn Research Center                                                  |
 | 21000 Brookpark Rd  	                                                       |
 | Cleveland, OH 44135 	                                                       |
 |                                                                             |
 | File Name:     BasicLoad.int                                                |
 | Author(s):     Jeffrey Csank, David Sadey, Tom Lavelle                      |
 | Date(s):       February 2019                                                |
 |                                                                             |
 -------------------------------------------------------------------------------
***/

#ifndef __BASICLOAD__
#define __BASICLOAD__

class BasicLoad extends ElectricElement {
  
  //----------------------------
  // ****** DOCUMENTATION ******
  //----------------------------  

  // title = "";

  description = "The " + isA() + "serves as a basic, constant impedance power load.";

  usageNotes = isA() +
  "

- The input design parameters that must be specified by the modeler when creating an instance 
of this " + isA() + " component is the complex impedance, Z, in Ohms (complex).

- This component supports DC and AC (single or multiphase) power (see ElectricPowerType). 
At instantiation, this component's power type is unspecified. NPSS Power System Components 
need to have a power type in order to correctly run power calculations. For this component, 
the power type is typically set by calling the propagateEpsSolverListAndPowerTypes() method at the top 
level assembly. This method is defined in ElectricPort.prt.

- This component does not contain a node, and so starts each iteration with its port voltages 
unknown. The concept in NPSS Power System Library is that all components that contain nodes 
all have a prePass() method specified that pushes node voltage information, via their ports
to all components that do not contain nodes and so do not know their voltages. The intent is 
that after all component prePass methods are automatically called, all components in the 
system will then have port voltages specified. Then during the normal iteration, components 
that don't contain nodes such as this one, will execute first. These components typically 
transmit power from one node to another and do not transform it from one kind to another 
(e.g. cables and breaker). These execute first in the solver sequence, and inside their 
calculate() methods, they calculate their currents, which are then passed via the ports, to 
all other components in the circuit. So after these nodeless transmission components 
execute, all electric port voltages and currents should be specified, and so all other 
components are free to run.

- This component is a circuit component and, at this time, has not been set up to include 
thermal models.

- Also note that this component has an output port. This (for the example the component is 
used for) represents a return path (a node with voltage = 0).
 
- Solver independents and dependents are not used in the " + isA() + " component, and there is 
no sizing logic included in this component.";
  
  
  //------------------------------
  // ****** SETUP VARIABLES ******
  //------------------------------

  Complex dV;
  Complex Z;
  Complex I;

  //----------------------------------------------------------
  // ****** SETUP PORTS, FLOW STATIONS, SOCKETS, TABLES ******
  //----------------------------------------------------------  

  ElectricInputPort EP_I {
    description = "Electric input port.";
  }

  ElectricOutputPort EP_O {
    description = "Electric output port.";
  }
  
  Option switchDes {
    allowedValues = { "DESIGN", "OFFDESIGN" }
    description = "Determines if the element is in design or off-design mode.";
    rewritableValues = FALSE;
    trigger = FALSE;
  }
  
  void calculate() {		
    // calculate current from voltage drop
    dV = EP_I.VLN - EP_O.VLN;
    I = dV / Z;
    
    // set the conditions in the port
    EP_O.setIVRMS(I, EP_O.V);
    EP_I.setIVRMS(I, EP_I.V);
    EP_O.frequency = EP_I.frequency;		
  }
}
#endif

/***
 -------------------------------------------------------------------------------
 |                                                                             |
 | NASA Glenn Research Center                                                  |
 | 21000 Brookpark Rd 		                                                     |
 | Cleveland, OH 44135 	                                                       |
 |                                                                             |
 | File Name:     InterpretedPort.int										                       |
 | Author(s):     Jeffrey Csank, David Sadey, Tom Lavelle                      |
 | Date(s):       October 2018	                                               |
 |                                                                             |
 | Description:   Link port file to let ports know about each other.           |
 |                                                                             |
 -------------------------------------------------------------------------------
***/

void linkPortI(string E1, string E2) {
  (E1->getPathName())->refport = E2->getPathName();
  (E2->getPathName())->refport = E1->getPathName();
}

// link electric port function prototype
void linkEports(string portName1, string portName2, string linkType) {
  
  string nodePortFullName, nodePortName;
  
  if ( linkType != "NODE" && linkType !="PORT" ) {
    ESOreport(1020902, "linkType input: " + linkType + " is invalid. Valid options are \"NODE\" or \"PORT\" ", 1);
    return;
  } else if (!exists(portName1)) { 
    ESOreport(1020902, "portName1 " + portName1 + " doesn't exist", 1);
    return;
  }
  
  if (linkType == "NODE") {
    if (!exists(portName2)) {
      create("Element","Enode",portName2);
      portName2->frequency = defaultFrequency;
      solverSequence.append( portName2 );
    }
    nodePortName="Ep";
    int DUMCounter;
    if( DUMCounter <= 0 )    { DUMCounter = 1; }
    nodePortName = nodePortName + toStr(DUMCounter);
    DUMCounter++;
    nodePortFullName = portName2 + "." + nodePortName;    
    if (!exists(nodePortFullName)) {
      if (portName1->hasInterface("ElectricOutputPort")) {
        portName2->create("VariableContainer","ElectricInputPort",nodePortName); 
      }
      if (portName1->hasInterface("ElectricInputPort")) {
        portName2->create("VariableContainer","ElectricOutputPort",nodePortName); 
      }
    } else {
      ESOreport(1020902, "Node Port Name" + portName1 + "aready in use please use other name for this linkage", 1);
      return;
    }
    
    linkPortI( portName1, nodePortFullName );
  }
  
  if (linkType == "PORT") {
    if (!exists(portName2)) {
      ESOreport(1020902, "portName1 " + portName2 + " doesn't exist", 1);
      return;
    } else if (portName2 -> isA() != "ElectricInputPort" && portName2 -> isA() != "ElectricOutputPort") {
      ESOreport(1020902, "portName1 " + portName2 + " is not an electric port", 1);
      return;
    } else if (portName2 -> isA() == portName1 -> isA()) {
      ESOreport(1020902, "Both ports are of type " + portName1->isA() + " and cannot be connected", 1);
      return;
    }
    linkPortI(portName1, portName2);
  }
}